{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","root","padding","fieldSet","marginTop","display","container","backgroundColor","rowContainer","width","height","columnContainer","brick","border","randomBrickSize","Math","round","random","brickWidth","brickHeight","App","classes","useState","flexDirection","setFlexDirection","justifyContent","setJustifyContent","alignItems","setAlignItems","containerClass","classNames","containerStyles","toString","Object","keys","this","filter","name","map","join","Brick","className","style","minWidth","minHeight","fontSize","Grid","spacing","item","xs","sm","FormControl","component","FormLabel","RadioGroup","row","aria-label","value","onChange","event","FormControlLabel","control","Radio","color","label","Array","from","i","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.17020c30.chunk.js","sourcesContent":["import FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CSSProperties } from '@material-ui/core/styles/withStyles';\nimport classNames from 'classnames';\nimport React, { useState } from 'react';\n\nconst useStyles = makeStyles({\n    root: {\n        padding: '2rem',\n    },\n    fieldSet: {\n        marginTop: '1rem',\n        display: 'block',\n    },\n    container: {\n        backgroundColor: '#ddd'\n    },\n    rowContainer: {\n        width: '300px',\n        height: '185px',\n    },\n    columnContainer: {\n        width: '185px',\n        height: '300px',\n    },\n    brick: {\n        backgroundColor: 'orange',\n        border: '1px solid black',\n    }\n});\n\ntype FlexDirection = 'row' | 'column';\ntype JustifyContent = 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly';\ntype AlignItems = 'stretch' | 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'first baseline' | 'last baseline';\n\nfunction randomBrickSize(): number {\n    return (Math.round(Math.random() * 3) + 1) * 16;\n}\n\nconst brickWidth = [randomBrickSize(), randomBrickSize(), randomBrickSize(), randomBrickSize(), randomBrickSize()];\nconst brickHeight = [randomBrickSize(), randomBrickSize(), randomBrickSize(), randomBrickSize(), randomBrickSize()];\n\nfunction App() {\n    const classes = useStyles();\n\n    const [flexDirection, setFlexDirection] = useState<FlexDirection>('row');\n    const changeFlexDirection = (event: any, value: string) => setFlexDirection(value as FlexDirection);\n\n    const [justifyContent, setJustifyContent] = useState<JustifyContent>('flex-start');\n    const changeJustifyContent = (event: any, value: string) => setJustifyContent(value as JustifyContent);\n\n    const [alignItems, setAlignItems] = useState<AlignItems>('stretch');\n    const changeAlignItems = (event: any, value: string) => setAlignItems(value as AlignItems);\n\n    const containerClass = classNames({\n        [classes.container]: true,\n        [classes.rowContainer]: flexDirection === 'row',\n        [classes.columnContainer]: flexDirection === 'column',\n    });\n\n    const containerStyles: CSSProperties = {\n        display: 'flex',\n        flexDirection,\n        justifyContent,\n        alignItems,\n        toString() {\n            return ['{', ...Object.keys(this).filter(name => name !== 'toString').map(name => '  ' + name + ': \"' + this[name] + '\",'), '}'].join('\\n');\n        }\n    };\n\n    const Brick = ({ name, width, height }: { name: any, width: number, height: number }) => (\n        <div className={classes.brick} style={{ minWidth: width, minHeight: height, fontSize: `${height*0.8}px` }}>{name}</div>\n    );\n\n    return <>\n        <div className={classes.root}>\n            <Grid container spacing={3}>\n                <Grid item xs={12} sm={6}>\n                    <FormControl component=\"fieldset\">\n                        <FormLabel component=\"legend\">Direction</FormLabel>\n                        <RadioGroup row aria-label=\"direction\" name=\"direction\" value={flexDirection} onChange={changeFlexDirection}>\n                            <FormControlLabel\n                                value=\"row\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"Row\"\n                            />\n                            <FormControlLabel\n                                value=\"column\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"Column\"\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                    <FormControl component=\"fieldset\" className={classes.fieldSet}>\n                        <FormLabel component=\"legend\">Justify content</FormLabel>\n                        <RadioGroup row aria-label=\"justify-content\" name=\"justify-content\" value={justifyContent} onChange={changeJustifyContent}>\n                            <FormControlLabel\n                                value=\"flex-start\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"flex-start\"\n                            />\n                            <FormControlLabel\n                                value=\"flex-end\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"flex-end\"\n                            />\n                            <FormControlLabel\n                                value=\"center\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"center\"\n                            />\n                            <FormControlLabel\n                                value=\"space-between\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"space-between\"\n                            />\n                            <FormControlLabel\n                                value=\"space-around\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"space-around\"\n                            />\n                            <FormControlLabel\n                                value=\"space-evenly\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"space-evenly\"\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                    <FormControl component=\"fieldset\" className={classes.fieldSet}>\n                        <FormLabel component=\"legend\">Align items</FormLabel>\n                        <RadioGroup row aria-label=\"align-items\" name=\"align-items\" value={alignItems} onChange={changeAlignItems}>\n                            <FormControlLabel\n                                value=\"stretch\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"stretch\"\n                            />\n                            <FormControlLabel\n                                value=\"flex-start\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"flex-start\"\n                            />\n                            <FormControlLabel\n                                value=\"flex-end\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"flex-end\"\n                            />\n                            <FormControlLabel\n                                value=\"center\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"center\"\n                            />\n                            <FormControlLabel\n                                value=\"baseline\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"baseline\"\n                            />\n                            <FormControlLabel\n                                value=\"first baseline\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"first baseline\"\n                            />\n                            <FormControlLabel\n                                value=\"last baseline\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"last baseline\"\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <div className={containerClass} style={containerStyles}>\n                        {\n                            Array\n                                .from(Array(5).keys())\n                                .map(i => <Brick key={i} name={i} width={brickWidth[i]} height={brickHeight[i]} />)\n                        }\n                    </div>\n                    <pre>{containerStyles.toString()}</pre>\n                </Grid>\n            </Grid>\n        </div>\n    </>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}